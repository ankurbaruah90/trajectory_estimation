A ROS based visual inertial odometry package. 
Development base was inspired from an article and a subsequent 
code on monocular visual odometry found in https://avisingh599.github.io/vision/monocular-vo.

Steps:
1. Read images from /data/mono/
2. Extracts FAST/ORB/OPENSURF features from each frame.
3. Tracks the features in subsequent frames. Re-extracts features if the number of features drops below a certain threshold.
4. Estimates the essential matrix once matching pair of features are found.
5. Recovers the rotation and translation matrix from the essential matrix.
6. Computes the overall transformation by concatenating the rotation and translation matrices.


TODO:
1. Solve the scale ambiguity.
2. Fuse IMU data. Currently IMU data is not used.
3. Decide whether to use a filter or an optimization (bundle adjustment) based strategy.
4. Validate the estimated trajectory.

How to Run:
1. Clone to repository.
2. Make OpenSurf in includes folder.
3. Copy libsurf.so from the folder  Opensurf to includes.
4. Make a data directory within the package.
5. Copy the data sets to data.
6. Change the path of samplesDir in line number 176.
7. Use multiple feature extractors by setting MACROS in the vo_features.h headerfile.

